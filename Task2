import numpy as np
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load the Iris dataset
iris = load_iris()
X = iris.data
y = iris.target

# Split the data into training, validation, and test sets
X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.4, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

# Define a range of k values to experiment with
k_values = list(range(1, 11))

# Initialize variables to keep track of the best k and its corresponding accuracy
best_k = None
best_accuracy = 0.0

# Iterate over k values
for k in k_values:
    clf = KNeighborsClassifier(n_neighbors=k)
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_val)
    accuracy = accuracy_score(y_val, y_pred)
    
    if accuracy > best_accuracy:
        best_accuracy = accuracy
        best_k = k

# Train a KNN classifier with the best k value using the combined training and validation set
best_clf = KNeighborsClassifier(n_neighbors=best_k)
best_clf.fit(np.concatenate((X_train, X_val)), np.concatenate((y_train, y_val)))

# Evaluate the model on the test set
y_pred_test = best_clf.predict(X_test)
test_accuracy = accuracy_score(y_test, y_pred_test)
confusion = confusion_matrix(y_test, y_pred_test)
report = classification_report(y_test, y_pred_test, target_names=iris.target_names)

print(f"Best k: {best_k}")
print(f"Validation Accuracy with Best k: {best_accuracy}")
print(f"Test Accuracy with Best k: {test_accuracy}")
print(f"Confusion Matrix:\n{confusion}")
print(f"Classification Report:\n{report}")
